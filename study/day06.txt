2023-01-31 day06

정규화: 삽입/ 수정 / 삭제의 이상현상을 제거, 데이터 중복의 최소화,
          1~5차까지 있으나, 대부분은 3차 정규화까지 진행
1차 정규화(1NF): 하나의 컬럼에는 값이 1개만 있어야 한다.
반복적인 컬럼값이 나타나는 경우
ex)
상품명
바지1, 바지2, 바지3 -> 하나의 행에 여러 개의 데이터가 들어가 있다.

- 정규화 시
상품명
바지1
바지2
바지3

2차 정규화(2NF): 테이블의 모든 컬럼이 서로 관계가 있어야 한다.
ex)
USER
이름	나이	상품명
홍길동	20	바지
김길동	30	치마
독고길동	29	자켓

- 정규화 진행 시(관련없는 컬럼이기 때문에 테이블을 두 개로 만듦)
USER
이름	나이
홍길동	20	-> 정규화를 진행하고 나면 관련이 있는 컬럼만 남게 된다.
김길동	30
독고길동	29

PRODUCT
나이	제품명
20	바지	-> DB에서는 데이터를 정리하는 게 위주이기에
30	치마	    이렇게 테이블을 분리해놓으면 이 후 더 많은 데이터를 얻을 수 있다.
29	자켓

3차 정규화(3NF): 하나의 컬럼이 다른 컬럼을 대표할 수 없다.
ex)
이름	시	구	동	우편번호
홍길동	서울시	은평구	불광동	12345    -> 우편번호만 알아도 시, 구, 동을
김길동	인천시	부평구	부평동	44332        다 알 필요가 없어진다.

- 정규화 진행 시
이름	우편번호
홍길동	12345
김길동	44332

우편번호	시	구	동
12345	서울시	은평구	불광동
44332	인천시	부평구	부평동

데이터베이스에서 정규화가 필요한 이유: 데이터베이스를 잘못 설계하게 되면,
				  불필요한 데이터 중복으로 인해 공간이 낭비됨.
ex) 회원번호와 프로젝트 두 컬럼의 조합키로 설정되어 있는 테이블이 있다.
     (한 사람은 하나의 부서만 가질 수 있다.)
회원번호	이름	부서	프로젝트코드	급여	부서별 명수
2301	홍길동	개발팀	ABC001		3000	4
2301	홍길동	개발팀	CBA1112		2000	4
2301	홍길동	개발팀	EFG9991		4000	4
2302	김길동	기획팀	HIJ8282		5000	2
3405	이순신	디자인팀	MNO3000	7000	3
2306	김개똥	기획팀

이상현상의 종류
	- 삽입 이상: 새 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야 하는
		    문제
                       ex) 담당 프로젝트가 정해지지 않은 사원이 있다면, 프로젝트 코드에 NULL을 작성할
                            이 사원은 테이블에 추가할 수 없다. 따라서 '미정'이라는 프로젝트 코드를 따로 만들어서
                            삽입해야 한다.
	- 갱신 이상: 중복 행 중 일부만 변경하여 데이터가 불일치하게 되는 모순의
	               문제
                        ex) 한 명의 사원은 하나의 부서에만 속할 수 있다. 만약 "홍길동"이 보안팀으로
                             부서를 옮길 시 3개의 행을 모두 갱신해주지 않는다면 개발팀인지 보안팀인지
                             알 수 없다. 이러한 현상을 "갱신 이상"이라고 한다.
	- 삭제 이상: 행을 삭제하면 꼭 필요한 데이터까지 함께 삭제되는 문제
		ex) 이순신이 담당한 프로젝트가 박살나서 드랍하게 된다면 이순신행을
		     모두 삭제하게 된다. 따라서 프로젝트에서 드랍되면 모든 정보를
		     드랍하게 된다.
	위와 같은 현상이 발생되는 이유는 테이블이 정규화가 되어 있지 않기 때문
	정규화를 진행하기 위해서는 각 컬럼간의 관련성을 파악하고, 이 관련성을
	"함수의 종속성"이라고 한다. 따라서 하나의 테이블에서는 하나의 함수적 종속성만
	존재하도록 정규화를 한다.
--------------------------------------------------------------------------------
함수: 기본적으로 쿼리문을 더욱 강력하게 하고, 데이터 값을 조작하는데 도움이 되도록 하는 개념
  1) 자원에 대한 연산을 수행할 수 있다.
  2) 개별적인 데이터 항목을 수행할 수 있다.
X -> Y
X: 결정자 -> X가 Y를 결정
Y: 종속자 -> Y가 X에 종속
ex)
요리
칼 -> 결정자
요리 -> 종속자

1. 숫자형 함수
2. 문자형 함수
3. 날짜형 함수

----------------------------------------------------------------
NULL: 정의되지 않은 값, 빈 값 대신 미정 값을 부여할 때 사용 가능
         (PK는 불가능, FK 가능)

NOT NULL 제약조건
ALTER TABLE 테이블명 MODIFY 컬럼명 NOT NULL;

제약조건 삭제
ALTER TABLE 테이블명 DROP COIN CONSTRAINT 제약조건 이름

조건식
컬럼명 IS NULL: 해당 컬럼에서 값이 NULL인 것
컬럼명 IS NOT NULL: 해당 컬럼에서 값이 NULL이 아닌 것들

NULL
NVL(): NULL값 대신 다른 값으로 변경 후 검색
NVL2(): NULL일 때 변경할 값, NULL이 아닐 때 변경할 값을 각각 설정































































