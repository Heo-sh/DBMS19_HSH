2023-01-26 day05

SQL문
- DDL
- DML
- TCL(Transaction Control Language): 트랜잭션 제어 언어(DML을 위한 명령어)
    - 트랜잭션: 데이터베이스의 작업을 처리하는 논리적 연산 단위(분리될 수 없는 최소 단위)
	- 어떠한 작업을 하기 위해서 Select, Insert, Update, Delete를 사용하는데 이런 것들을
	  하나의 작업 단위라고 한다.
	- 트랜잭션의 특성
	  - 원자성(Atomicty): 트랜잭션에 정의된 연산(S, I, U, D)들은 모두 성공적으로 실행되던지 아니면
			  전혀 실행되지 않은 상태로 남아야 한다.
	  - 일관성(Consistency): 트랜잭션 실행 전의 데이터베이스의 내용이 잘못되지 않으면
			      트랜잭션 실행 후에도 데이터베이스의 내용이 잘못되면 안된다.
	  - 고립성(Isolation): 트랜잭션 실행 도중에 다른 트랜잭션의 영향을 받아 잘못된 결과를
			  만들어서는 안된다.
	  - 영속성, 지속성(Durability): 트랜잭션 실행이 성공적일 때, 그 트랜잭션이 갱신한
				 데이터베이스 내용은 영구적으로 저장된다.
- COMMIT: DML로 변경된 데이터를 데이터베이스에 적용할 때 사용
    - INSERT, UPDATE, DELETE문 등을 사용한 후 변경 작업을 데이터베이스에 반영하기 위해 사용
    - COMMIT문 사용 시 이전 데이터는 영원히 지워진다.
    - COMMIT문 사용 시 모든 사용자가 변경된 데이터 확인 가능
    - SQLServer는 기본적으로 AUTO COMMIT모드이므로 자동으로 COMMIT을 수행한다.
      (DML문이 성공하면 자동적으로 COMMIT을 실행한다.)
    - COMMIT 실행 시 트랜잭션 과정을 종료 -> COMMIT이 실행되기 전에 다른 사용자가 완료되지
      않은 데이터를 보거나 변경할 수 없다.
    - 사용법: COMMIT; -> Enter
- ROLLBACK: DML로 변경된 데이터를 변경 이전 상태로 되돌릴 때 사용
                 (데이터의 변경사항 취소)
    - ROLLBACK문 사용 시 이전 데이터 다시 재저장 -> COMMIT되지 않은 트랜잭션을 모두
					       모두 ROLLBACK시킴
    - ROLLBACK문 사용 시 관련 행의 잠금(LOCKING)이 풀려 다른 사용자들이 데이터 변경을
      할 수 있다.
    - SQLServer는 기본적으로 AUTO COMMIT 모드 이므로 자동으로 COMMIT, 오류가 발생하면
      ROLLBACK을 진행한다.
    - 사용법: ROLLBACK; -> Enter
- SAVEPOINT: 오류 복구 처리에 효과적인 방법 -> 전체 트랜잭션을 ROLLBACK하지 않고도
                                                              오류 복귀 가능
    - 효과적으로 오류 복구 처리를 위해 저장점을 만들 때 사용
	-> 전체 트랜잭션을 ROLLBACK하지 않고 현 시점에서 SAVEPOINT까지 일부 트랜잭션만
                오류 복귀 가능
    - 복잡한 대규모 트랜잭션에서 ERROR가 발생했을 때 주로 사용
    - 복수의 저장 지점을 정의 가능
    - 저장 지점까지만 ROLLBACK을 할 때 -> ROLLBACK TO "저장점";
    - 사용법: SAVEPOINT "세이브포인트 이름";
    - 호출: ROLLBACK TO "세이브포인트 이름";
ex) 10,000원이 든 계좌 A에서, 0원이 든 계좌 B로 돈 10,000원을 입금한다.
     -- query1
     UPDATE 계좌
     SET 잔액 = 0
     WHERE 계좌번호(특정 계좌를 지칭) = A;
     -- query2
     UPDATE 계좌
     SET 잔액 = 10,000
     WHERE 계좌번호 = B;

--------------------------------------------------------------------
별칭
-- AS(ALIAS): 별칭 - 컬럼의 이름이 너무 길다면 별명을 줘서 원래 이름 대신 사용할 수 있다.
별칭이 사용되는 곳 -> "" <-를 사용해야 한다.
-- SELECT절 (컬럼명): 컬럼명 AS "별칭" OR 컬럼명 "별칭"
-- FROM절 (테이블명): 테이블명 별칭
   ex) SELECT P.TEAM_ID, T.TEAM_ID FROM PLAYER P, TEAM T;

연결(CONCATENATION): ||
   ex) SELECT PLAYER_NAME || '의 포지션은 ' || "POSITION" || '이다.' "작전회의"
        FROM PLAYER; -> 고병운의 포지션은 DF이다.

유사검색
- LIKE: 포함된 문자열의 값을 찾는다. 문자의 갯수도 제한을 둘 수 있다.
  - 사용법: WHERE '컬럼명' LIKE ' ';
  - %: 모든 값
  - _: 하나의 값, '_' 하나에 하나의 문자열 값이라고 보면 된다.
  - ex) 'M%': M으로 시작하는 모든 값
         '%A': A로 끝나는 모든 값
         '%A%': 문자열의 중간 어디든지 A가 들어가는 모든 값
         'M_': M으로 시작하는 두 글자 값
         '_M_': 두번째 글자에 M이 들어가는 세글자 값
         '_A%': 두번째 글자에 A가 들어가는 모든 값








































